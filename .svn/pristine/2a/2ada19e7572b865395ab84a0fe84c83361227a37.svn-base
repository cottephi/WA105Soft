/////////////////////////////////////////////////////////////////////////////////////////
//
//  Read reco configuration file
//
//
//
/////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdlib>

#include "RecoConfigFile.h"

//
//
//
RecoConfigFile::RecoConfigFile()
{
  // keyword defintion
  fKeyEvents    = "EVENTS";
  fKeyRecoBegin = "RECO_";
  fKeyRecoEnd   = "END_";
  fKeyAlgoBegin = "BEGIN_ALGORITHM";
  fKeyAlgoEnd   = "END_ALGORITHM";

  fStartEv = -1;
  fTotalEv = -1;
}

//
//
//
RecoConfigFile::~RecoConfigFile()
{
  fRecMods.clear();
}

//
//
//
bool RecoConfigFile::EventsSelected(Long64_t &start, Long64_t &nevents)
{
  start   = fStartEv;
  nevents = fTotalEv;

  return ( (fStartEv >= 0) && (fTotalEv > 0) );
}

//
//
//
void RecoConfigFile::Read(std::string fname, std::vector<RecoConfig> &recmods)
{
  fRecMods.clear();
  recmods.clear();
  
  ifstream in(fname.c_str());
  
  std::string word; 
  std::string tmpString;

  if (!in.is_open()) 
    {
      std::cerr << "cannot find datacard file " << fname << std::endl;
      exit(1);
    }

  fReco    = "";
  fRecoAlg = "";
  fRecoAlgCtr = 0;
  while (in >> word) 
    {
      // skip comment
      if (word[0]=='#') 
	{
	  getline(in,tmpString);
	  continue;
	}
      
      //read datacard
      getline(in,tmpString);
      std::istringstream line(tmpString);
      if (word == "END") 
	return ;
      if(!ReadLine( line, word ))
	{
	  std::cerr<<"ERROR: could not read config file"<<std::endl;
	  exit(-1);
	}
    }
  
  in.close();

  
  for(size_t i=0;i<fRecMods.size();i++)
    {
      if(fRecMods[i].GetTaskName().empty() || 
	 fRecMods[i].GetAlgoName().empty() )
	continue;
      
      recmods.push_back( fRecMods[i] );

      //recmods.back().Print();
    }
}


bool RecoConfigFile::ReadLine(std::istringstream &line, std::string &keyword)
{
  //TString myLine;
  //float v1, v2;
  if(keyword.find(fKeyEvents) == 0)
    {
      line >> fStartEv >> fTotalEv;
      return true;
    }
  if(keyword.find(fKeyRecoBegin) == 0)
    {
      //line >> myLine;
      if(!fReco.empty())
	{
	  std::cerr<<"ERROR: card format appears to be bad"<<std::endl;
	  std::cerr<<"       probably missing 'END' statements"<<std::endl;
	}
      fReco = keyword.substr(fKeyRecoBegin.size());
      fRecoAlg = "";
      fRecoAlgCtr = 0;
      fRecMods.push_back(RecoConfig());
      return true;
    }
  
  if(!fReco.empty())
    {
      if( keyword.compare(fKeyRecoEnd+fReco) == 0 )
	{
	  
	  if( fRecMods.back().GetAlgoName().empty() )
	    {
	      // does not have any algorithms enabled
	      fRecMods.pop_back();
	    }  
	  else
	    fRecMods.back().SetTaskName( fReco );
	  
	  fRecoAlg = "";
	  fReco = "";
	  return true;
	}
      
      //allow only one algorithm per module
      if( keyword.compare(fKeyAlgoBegin) == 0 && fRecoAlg.empty() )
	{
	  int is_selected;
	  std::string algoname;
	  line >> is_selected >> algoname;
	  if(fRecoAlgCtr>=1 && is_selected == 1) 
	    {
	      std::cerr<<"ERROR: could only have one active algorithm in block "<<fReco<<std::endl;
	      return false;
	    }
	  if(is_selected == 1) fRecoAlg = algoname;
	  return true;
	}

      if ( keyword.compare(fKeyAlgoEnd) == 0 && !fRecoAlg.empty() )
	{
	  fRecMods.back().SetAlgoName( fRecoAlg );
	  fRecoAlgCtr++;
	  fRecoAlg = "";
	  return true;
	}
      
      if( !fRecoAlg.empty() )
	{
	  // interpret as a parameters
	  std::string strline = line.str();
	  //std::cout<<keyword<<" "<<strline<<std::endl;

	  size_t pos1 = strline.find("[");
	  size_t pos2 = strline.find("]");
	  
	  if(pos1 == std::string::npos || 
	     pos2 == std::string::npos )
	    {
	      std::cerr<<"ERROR: could not intepret parameters string for "<<keyword<<std::endl;
	      std::cerr<<"     "<<strline<<std::endl;
	      
	      // continue without aborting though
	      return true;
	    }
	  
	  strline = strline.substr(pos1+1, pos2-pos1);
	  std::vector<float> vals; 
	  float val;
	  std::stringstream ss(strline);
	  while( ss >> val )
	    {
	      vals.push_back(val);
	      if(ss.peek() == ',')
		ss.ignore();
	    }
	 
	  if(!vals.empty())	    
	    fRecMods.back().AddValue(keyword, vals);
	  
	  return true;
	}
	
    } // end if
  
  return true;
}



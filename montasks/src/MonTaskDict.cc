//
// File generated by rootcint at Fri May  5 10:01:23 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIMonTaskDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MonTaskDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MonTask_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MonTask(void *p);
   static void deleteArray_MonTask(void *p);
   static void destruct_MonTask(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MonTask*)
   {
      ::MonTask *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MonTask >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MonTask", ::MonTask::Class_Version(), "../include/MonTask.h", 26,
                  typeid(::MonTask), DefineBehavior(ptr, ptr),
                  &::MonTask::Dictionary, isa_proxy, 4,
                  sizeof(::MonTask) );
      instance.SetDelete(&delete_MonTask);
      instance.SetDeleteArray(&deleteArray_MonTask);
      instance.SetDestructor(&destruct_MonTask);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MonTask*)
   {
      return GenerateInitInstanceLocal((::MonTask*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MonTask*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MonBenchDist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MonBenchDist(void *p = 0);
   static void *newArray_MonBenchDist(Long_t size, void *p);
   static void delete_MonBenchDist(void *p);
   static void deleteArray_MonBenchDist(void *p);
   static void destruct_MonBenchDist(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MonBenchDist*)
   {
      ::MonBenchDist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MonBenchDist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MonBenchDist", ::MonBenchDist::Class_Version(), "../include/MonBenchDist.h", 19,
                  typeid(::MonBenchDist), DefineBehavior(ptr, ptr),
                  &::MonBenchDist::Dictionary, isa_proxy, 4,
                  sizeof(::MonBenchDist) );
      instance.SetNew(&new_MonBenchDist);
      instance.SetNewArray(&newArray_MonBenchDist);
      instance.SetDelete(&delete_MonBenchDist);
      instance.SetDeleteArray(&deleteArray_MonBenchDist);
      instance.SetDestructor(&destruct_MonBenchDist);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MonBenchDist*)
   {
      return GenerateInitInstanceLocal((::MonBenchDist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MonBenchDist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr MonTask::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MonTask::Class_Name()
{
   return "MonTask";
}

//______________________________________________________________________________
const char *MonTask::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MonTask*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MonTask::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MonTask*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MonTask::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MonTask*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MonTask::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MonTask*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MonBenchDist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MonBenchDist::Class_Name()
{
   return "MonBenchDist";
}

//______________________________________________________________________________
const char *MonBenchDist::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MonBenchDist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MonBenchDist::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MonBenchDist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MonBenchDist::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MonBenchDist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MonBenchDist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MonBenchDist*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MonTask::Streamer(TBuffer &R__b)
{
   // Stream an object of class MonTask.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MonTask::Class(),this);
   } else {
      R__b.WriteClassBuffer(MonTask::Class(),this);
   }
}

//______________________________________________________________________________
void MonTask::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MonTask.
      TClass *R__cl = ::MonTask::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fName", (void*)&fName);
      R__insp.InspectMember("string", (void*)&fName, "fName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTKey", (void*)&fTKey);
      R__insp.InspectMember("string", (void*)&fTKey, "fTKey.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSEnv", (void*)&fSEnv);
      R__insp.InspectMember("string", (void*)&fSEnv, "fSEnv.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFExt", (void*)&fFExt);
      R__insp.InspectMember("string", (void*)&fFExt, "fFExt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPollTimer", &fPollTimer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPollTime", &fPollTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGotData", &fGotData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConfDir", &fConfDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastDir", (void*)&fLastDir);
      R__insp.InspectMember("string", (void*)&fLastDir, "fLastDir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCnvsWinWsz", &fCnvsWinWsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCnvsWinHsz", &fCnvsWinHsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLastCnvs", &fLastCnvs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fItemList", (void*)&fItemList);
      R__insp.InspectMember("vector<std::string>", (void*)&fItemList, "fItemList.", false);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MonTask(void *p) {
      delete ((::MonTask*)p);
   }
   static void deleteArray_MonTask(void *p) {
      delete [] ((::MonTask*)p);
   }
   static void destruct_MonTask(void *p) {
      typedef ::MonTask current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MonTask

//______________________________________________________________________________
void MonBenchDist::Streamer(TBuffer &R__b)
{
   // Stream an object of class MonBenchDist.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MonBenchDist::Class(),this);
   } else {
      R__b.WriteClassBuffer(MonBenchDist::Class(),this);
   }
}

//______________________________________________________________________________
void MonBenchDist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MonBenchDist.
      TClass *R__cl = ::MonBenchDist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitsChView0", &fHitsChView0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitsChView1", &fHitsChView1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitsChQView0", &fHitsChQView0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitsChQView1", &fHitsChQView1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkStartView0", &fTrkStartView0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkStartView1", &fTrkStartView1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkEndView0", &fTrkEndView0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkEndView1", &fTrkEndView1);
      MonTask::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MonBenchDist(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MonBenchDist : new ::MonBenchDist;
   }
   static void *newArray_MonBenchDist(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MonBenchDist[nElements] : new ::MonBenchDist[nElements];
   }
   // Wrapper around operator delete
   static void delete_MonBenchDist(void *p) {
      delete ((::MonBenchDist*)p);
   }
   static void deleteArray_MonBenchDist(void *p) {
      delete [] ((::MonBenchDist*)p);
   }
   static void destruct_MonBenchDist(void *p) {
      typedef ::MonBenchDist current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MonBenchDist

/********************************************************
* src/MonTaskDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMonTaskDict();

extern "C" void G__set_cpp_environmentMonTaskDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MonTask.h");
  G__add_compiledheader("MonBenchDist.h");
  G__cpp_reset_tagtableMonTaskDict();
}
#include <new>
extern "C" int G__cpp_dllrevMonTaskDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MonTask */
static int G__MonTaskDict_259_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MonTask*) G__getstructoffset())->GetName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MonTask*) G__getstructoffset())->GetTaskKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>& obj = ((const MonTask*) G__getstructoffset())->GetItems();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MonTask*) G__getstructoffset())->GetPollTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MonTask*) G__getstructoffset())->SetFileDirectory(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((MonTask*) G__getstructoffset())->SetFileDirectory(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->SetPollTime((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->StartPolling();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->StopPolling();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0]), (TCanvas*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->PollData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MonTask::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MonTask::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MonTask::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MonTask::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MonTask*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonTask*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MonTask::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MonTask::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MonTask::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_259_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MonTask::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MonTask G__TMonTask;
static int G__MonTaskDict_259_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MonTask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MonTask*) (soff+(sizeof(MonTask)*i)))->~G__TMonTask();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MonTask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MonTask*) (soff))->~G__TMonTask();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MonTaskDict_259_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MonTask* dest = (MonTask*) G__getstructoffset();
   *dest = *(MonTask*) libp->para[0].ref;
   const MonTask& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MonBenchDist */
static int G__MonTaskDict_288_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MonBenchDist* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MonBenchDist[n];
     } else {
       p = new((void*) gvp) MonBenchDist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MonBenchDist;
     } else {
       p = new((void*) gvp) MonBenchDist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MonBenchDist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MonBenchDist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MonBenchDist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MonBenchDist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MonBenchDist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MonBenchDist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MonBenchDist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MonBenchDist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MonTaskDict_288_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MonBenchDist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MonTaskDict_288_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MonBenchDist* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MonBenchDist(*(MonBenchDist*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MonBenchDist G__TMonBenchDist;
static int G__MonTaskDict_288_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MonBenchDist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MonBenchDist*) (soff+(sizeof(MonBenchDist)*i)))->~G__TMonBenchDist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MonBenchDist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MonBenchDist*) (soff))->~G__TMonBenchDist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MonTaskDict_288_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MonBenchDist* dest = (MonBenchDist*) G__getstructoffset();
   *dest = *(MonBenchDist*) libp->para[0].ref;
   const MonBenchDist& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MonTask */

/* MonBenchDist */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMonTaskDict {
 public:
  G__Sizep2memfuncMonTaskDict(): p(&G__Sizep2memfuncMonTaskDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMonTaskDict::*p)();
};

size_t G__get_sizep2memfuncMonTaskDict()
{
  G__Sizep2memfuncMonTaskDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMonTaskDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist))) {
     MonBenchDist *G__Lderived;
     G__Lderived=(MonBenchDist*)0x1000;
     {
       MonTask *G__Lpbase=(MonTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist),G__get_linked_tagnum(&G__MonTaskDictLN_MonTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMonTaskDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__MonTaskDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MonTaskDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MonTaskDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MonTaskDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MonTask */
static void G__setup_memvarMonTask(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MonTaskDictLN_MonTask));
   { MonTask *p; p=(MonTask*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_string),-1,-1,2,"fName=",0,"name of the monitoring task (used to find dq files)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_string),-1,-1,2,"fTKey=",0,"one word hint to its function (used for display in the tree)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_string),-1,-1,2,"fSEnv=",0,"environment to search ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_string),-1,-1,2,"fFExt=",0,"file extension to use");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TTimer),-1,-1,2,"fPollTimer=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"fPollTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fGotData=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fConfDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_string),-1,-1,2,"fLastDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"fCnvsWinWsz=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"fCnvsWinHsz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TCanvas),-1,-1,2,"fLastCnvs=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"fItemList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MonBenchDist */
static void G__setup_memvarMonBenchDist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist));
   { MonBenchDist *p; p=(MonBenchDist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fHitsChView0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fHitsChView1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fHitsChQView0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fHitsChQView1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fTrkStartView0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fTrkStartView1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fTrkEndView0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TH1F),-1,-1,4,"fTrkEndView1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MonTaskDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMonTaskDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMonTask(void) {
   /* MonTask */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MonTaskDictLN_MonTask));
   G__memfunc_setup("GetName",673,G__MonTaskDict_259_0_2, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTaskKey",988,G__MonTaskDict_259_0_3, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetItems",802,G__MonTaskDict_259_0_4, 117, G__get_linked_tagnum(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPollTime",1094,G__MonTaskDict_259_0_5, 102, -1, -1, 0, 0, 1, 1, 8, "", "seconds", (void*) NULL, 0);
   G__memfunc_setup("SetFileDirectory",1633,G__MonTaskDict_259_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 0 - dir u 'string' - 0 - fext "
"u 'string' - 0 '\"\"' spattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPollTime",1106,G__MonTaskDict_259_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - secs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartPolling",1251,G__MonTaskDict_259_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopPolling",1147,G__MonTaskDict_259_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__MonTaskDict_259_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - mondata U 'TCanvas' - 0 - cnvs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PollData",785,G__MonTaskDict_259_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DoFileRead",943,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'string' - 1 - fname", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DoDraw",577,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"k - 'size_t' 0 - idx U 'TCanvas' - 0 - cnvs", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DoDummyData",1081,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("FilePathFromEnv",1482,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFuncIdx",977,(G__InterfaceMethod) NULL, 108, -1, G__defined_typename("ssize_t"), 0, 1, 1, 2, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCanvas",902,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"u 'string' - 1 - str U 'TCanvas' - 0 - cnvs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MonTaskDict_259_0_19, 85, G__get_linked_tagnum(&G__MonTaskDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MonTask::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MonTaskDict_259_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MonTask::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MonTaskDict_259_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MonTask::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MonTaskDict_259_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MonTask::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MonTaskDict_259_0_23, 85, G__get_linked_tagnum(&G__MonTaskDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MonTaskDict_259_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MonTaskDict_259_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MonTaskDict_259_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MonTaskDict_259_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MonTask::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MonTaskDict_259_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MonTask::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MonTaskDict_259_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MonTask::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MonTaskDict_259_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MonTask::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MonTask", 827, G__MonTaskDict_259_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MonTaskDict_259_0_32, (int) ('u'), G__get_linked_tagnum(&G__MonTaskDictLN_MonTask), -1, 1, 1, 1, 1, 0, "u 'MonTask' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMonBenchDist(void) {
   /* MonBenchDist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist));
   G__memfunc_setup("MonBenchDist",1182,G__MonTaskDict_288_0_1, 105, G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoFileRead",943,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 1 - fname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DoDraw",577,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"k - 'size_t' 0 - idx U 'TCanvas' - 0 - cnvs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DoDummyData",1081,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 4, 1, 4, 0, 
"U 'TH1F' - 0 - from U 'TH1F' - 1 - to "
"C - - 10 - name C - - 10 - xtitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MonTaskDict_288_0_7, 85, G__get_linked_tagnum(&G__MonTaskDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MonBenchDist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MonTaskDict_288_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MonBenchDist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MonTaskDict_288_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MonBenchDist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MonTaskDict_288_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MonBenchDist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MonTaskDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MonTaskDict_288_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MonTaskDict_288_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MonBenchDist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MonTaskDict_288_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MonBenchDist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MonTaskDict_288_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MonBenchDist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MonTaskDict_288_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MonBenchDist::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MonBenchDist", 1182, G__MonTaskDict_288_0_19, (int) ('i'), G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist), -1, 0, 1, 1, 1, 0, "u 'MonBenchDist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MonBenchDist", 1308, G__MonTaskDict_288_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MonTaskDict_288_0_21, (int) ('u'), G__get_linked_tagnum(&G__MonTaskDictLN_MonBenchDist), -1, 1, 1, 1, 1, 0, "u 'MonBenchDist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMonTaskDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMonTaskDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMonTaskDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MonTaskDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TTimer = { "TTimer" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_MonTask = { "MonTask" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MonTaskDictLN_MonBenchDist = { "MonBenchDist" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMonTaskDict() {
  G__MonTaskDictLN_TClass.tagnum = -1 ;
  G__MonTaskDictLN_TBuffer.tagnum = -1 ;
  G__MonTaskDictLN_TMemberInspector.tagnum = -1 ;
  G__MonTaskDictLN_string.tagnum = -1 ;
  G__MonTaskDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MonTaskDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MonTaskDictLN_TTimer.tagnum = -1 ;
  G__MonTaskDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MonTaskDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MonTaskDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__MonTaskDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MonTaskDictLN_TCanvas.tagnum = -1 ;
  G__MonTaskDictLN_TH1F.tagnum = -1 ;
  G__MonTaskDictLN_MonTask.tagnum = -1 ;
  G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__MonTaskDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MonTaskDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MonTaskDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MonTaskDictLN_MonBenchDist.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMonTaskDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_string);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TTimer);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MonTaskDictLN_MonTask),sizeof(MonTask),-1,263427,(char*)NULL,G__setup_memvarMonTask,G__setup_memfuncMonTask);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MonTaskDictLN_TVectorTlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MonTaskDictLN_MonBenchDist),sizeof(MonBenchDist),-1,263424,(char*)NULL,G__setup_memvarMonBenchDist,G__setup_memfuncMonBenchDist);
}
extern "C" void G__cpp_setupMonTaskDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMonTaskDict()");
  G__set_cpp_environmentMonTaskDict();
  G__cpp_setup_tagtableMonTaskDict();

  G__cpp_setup_inheritanceMonTaskDict();

  G__cpp_setup_typetableMonTaskDict();

  G__cpp_setup_memvarMonTaskDict();

  G__cpp_setup_memfuncMonTaskDict();
  G__cpp_setup_globalMonTaskDict();
  G__cpp_setup_funcMonTaskDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMonTaskDict();
  return;
}
class G__cpp_setup_initMonTaskDict {
  public:
    G__cpp_setup_initMonTaskDict() { G__add_setup_func("MonTaskDict",(G__incsetup)(&G__cpp_setupMonTaskDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMonTaskDict() { G__remove_setup_func("MonTaskDict"); }
};
G__cpp_setup_initMonTaskDict G__cpp_setup_initializerMonTaskDict;

